#include "Globals.h"

#include "Version.h"

#define WIN32_LEAN_AND_MEAN
#define NOMINMAX
#include <Windows.h>
#include <wil/win32_helpers.h>


static const char cScanCodeIndex[424] = {
	'\0', '\0', '\0', '\0', '1', '!', '2', '@', '3', '#', '4', '$', '5', '%', '6', '^', '7', '&', '8', '*',
	'9', '(', '0', ')', '-', '_', '=', '+', '\0', '\0', '\0', '\0', 'q', 'Q', 'w', 'W', 'e', 'E', 'r', 'R',
	't', 'T', 'y', 'Y', 'u', 'U', 'i', 'I', 'o', 'O', 'p', 'P', '[', '{', ']', '}', '\n', '\n', '\0', '\0',
	'a', 'A', 's', 'S', 'd', 'D', 'f', 'F', 'g', 'G', 'h', 'H', 'j', 'J', 'k', 'K', 'l', 'L', ';', ':', '\'',
	'\"', '`', '~', '\0', '\0', '\\', '|', 'z', 'Z', 'x', 'X', 'c', 'C', 'v', 'V', 'b', 'B', 'n', 'N', 'm',
	'M', ',', '<', '.', '>', '/', '?', '\0', '\0', '*', '*', '\0', '\0', ' ', ' ', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '7', '7', '8', '8', '9', '9', '-', '-', '4', '4', '5', '5', '6', '6', '+', '+', '1', '1',
	'2', '2', '3', '3', '0', '0', '.', '.', '\0', '\0', '\0', '\0', '\\', '|', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', ',', ',', '\0', '\0',
	'/', '/'
};

static const char cScanPolishCodeIndex[424] = {
	'\0', '\0', '\0', '\0', '1', '!', '2', '@', '3', '#', '4', '$', '5', '%', '6', '^', '7', '&', '8', '*',
	'9', '(', '0', ')', '-', '_', '=', '+', '\0', '\0', '\0', '\0', 'q', 'Q', 'w', 'W', '\xEA', '\xCA', 'r',
	'R', 't', 'T', 'y', 'Y', 'u', 'U', 'i', 'I', '\xF3', '\xD3', 'p', 'P', '[', '{', ']', '}', '\n', '\n',
	'\0', '\0', '\xB9', '\xA5', '\x9C', '\x8C', 'd', 'D', 'f', 'F', 'g', 'G', 'h', 'H', 'j', 'J', 'k', 'K',
	'\xB3', '\xA3', ';', ':', '\'', '\"', '`', '~', '\0', '\0', '\\', '|', '\xBF', '\xAF', '\x9F', '\x8F',
	'\xE6', '\xC6', 'v', 'V', 'b', 'B', '\xF1', '\xD1', 'm', 'M', ',', '<', '.', '>', '/', '?', '\0', '\0',
	'*', '*', '\0', '\0', ' ', ' ', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '7', '7', '8', '8',
	'9', '9', '-', '-', '4', '4', '5', '5', '6', '6', '+', '+', '1', '1', '2', '2', '3', '3', '0', '0', '.',
	'.', '\0', '\0', '\0', '\0', '\\', '|', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0',
	'\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', '\0', ',', ',', '\0', '\0', '/', '/'
};  



uint32_t GameInfo_GetTextLanguage_LocalePackCheck()
{
	uint32_t langID = GameInfo_GetTextLanguage();

	// If Locale Pack is installed, don't do any special casing
	// Else, always pick Polish for PL, or pick Czech when CZ exe is used and Spanish is selected
	if (!Version::HasMultipleLocales())
	{
		if (Version::IsPolish())
		{
			langID = TEXT_LANG_POLISH;
		}
		else if (Version::IsCzech() && langID == TEXT_LANG_SPANISH)
		{
			langID = TEXT_LANG_CZECH;
		}
	}
	return langID;
}

char Keyboard_ConvertScanCodeToCharLocalised(int scanCode, int shift, int capsLock)
{
	char ch = cScanCodeIndex[2 * scanCode];
	if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))
	{
		if (gKeyboardData[184] != 0 && GameInfo_GetTextLanguage() == TEXT_LANG_POLISH)
		{
			return cScanPolishCodeIndex[2 * scanCode + ((capsLock ^ shift) & 1)];
		}
		return cScanCodeIndex[2 * scanCode + ((capsLock ^ shift) & 1)];
	}
	if ( shift )
		return cScanCodeIndex[2 * scanCode + 1];

	return ch;
}

bool Keyboard_IsKeyPressed(int keyCode)
{
	return gKeyboardData[keyCode] != 0;
}

bool Keyboard_WasKeyPressed(int keyCode)
{
	return gKeyboardData[keyCode] != 0 && gLastKeyboardData[keyCode] == 0;
}

std::filesystem::path GetPathToGameDir()
{
    std::filesystem::path result;

	wil::unique_cotaskmem_string pathToExe;
	if (SUCCEEDED(wil::GetModuleFileNameW(nullptr, pathToExe)))
	{
		try
		{
			result = std::filesystem::path(pathToExe.get()).parent_path();
		}
		catch (const std::filesystem::filesystem_error&)
		{
		}
	}
    return result;
}
